using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using RimWorld;
using Verse;
using Verse.AI;
using Verse.AI.Group;
using HarmonyLib;
using Verse.Sound;
using AdeptusMechanicus;
using AdeptusMechanicus.ExtensionMethods;
using System.Reflection.Emit;
using System.Reflection;
using RimWorld.QuestGen;

namespace AdeptusMechanicus.HarmonyInstance
{
    // QuestGen_Shuttle.GenerateShuttle
    [HarmonyPatch(typeof(QuestGen_Shuttle), "GenerateShuttle")]
    public static class QuestGen_Shuttle_GenerateShuttle_FactionShuttle_Transpiler
    {
        static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)
        {
            var instructionsList = new List<CodeInstruction>(instructions);
            FieldInfo shuttle = AccessTools.Field(typeof(ThingDefOf), nameof(ThingDefOf.Shuttle));
            for (int i = 0; i < instructionsList.Count; i++)
            {
                var instruction = instructionsList[i];
                if (instruction.opcode == OpCodes.Ldsfld && instruction.OperandIs(shuttle))
                {
                    yield return instruction;
                //    Log.Message("Faction Shuttle System: Patching ...QuestGen_Shuttle.GenerateShuttle...");
                    yield return new CodeInstruction(opcode: OpCodes.Ldarg_1);              // Faction
                    instruction = new CodeInstruction(opcode: OpCodes.Call, operand: typeof(QuestGen_Shuttle_GenerateShuttle_FactionShuttle_Transpiler).GetMethod("FactionShuttle"));

                }
                /*
                if (instruction.opcode == OpCodes.Ldfld)
                {
                    yield return new CodeInstruction(opcode: OpCodes.Ldarg_0);              // CompProjectileInterceptor
                    yield return new CodeInstruction(opcode: OpCodes.Ldarg_1);              // Projectile
                    yield return new CodeInstruction(opcode: OpCodes.Ldarg_2);              // lastExactPos
                    yield return new CodeInstruction(opcode: OpCodes.Ldarg_3);              // newExactPos
                    instruction = new CodeInstruction(opcode: OpCodes.Call, operand: typeof(CompProjectileInterceptor_CheckIntercept_Laser_Transpiler).GetMethod("LaserIntercept"));
                }
                */
                yield return instruction;
            }

        }

        public static ThingDef FactionShuttle(ThingDef Shuttle, Faction owningFaction)
        {
            ThingDef result = Shuttle;
        //    Log.Message("QuestGen_Shuttle.GenerateShuttle: faction shuttle system: Start");
            if (owningFaction != null)
            {
            //    Log.Message("faction shuttle system: " + owningFaction.Name);
            }
            return result;
        }
    }
}
