using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using RimWorld;
using Verse;
using Verse.AI;
using Verse.AI.Group;
using Harmony;
using Verse.Sound;
using UnityEngine;
using AdeptusMechanicus.ExtensionMethods;

namespace AdeptusMechanicus.Harmony
{

    [HarmonyPatch(typeof(PawnsArrivalModeWorker_EdgeWalkIn), "Arrive")]
    public static class AM_PawnsArrivalModeWorker_EdgeWalkIn_Arrive_DeepStrike_Patch
    {
        [HarmonyPrefix]
        public static void Arrive_DeepStrike(ref List<Pawn> pawns, IncidentParms parms)
        {
            Map map = (Map)parms.target;
            //    Log.Message(string.Format("pawns: {0}", pawns.Count));
            //    Log.Message(string.Format("Map: {0}", map));
            if (!pawns.NullOrEmpty())
            {
                bool patch = pawns.Any(x => x.canDeepStrike());
                List<Pawn> DeepStrikers = new List<Pawn>();
                List<Pawn> pawnsN = new List<Pawn>();
                if (patch)
                {
                    pawnsN = pawns.FindAll(x => !x.canDeepStrike());
                    if (!pawns.FindAll(x => x.canDeepStrike()).NullOrEmpty())
                    {
                        Log.Message(string.Format("Deep Strike Candidates: {0}", pawns.FindAll(x => !x.canDeepStrike()).Count));
                        foreach (Pawn p in pawns.FindAll(x => x.canDeepStrike()))
                        {
                            bool Striker = Rand.Chance(p.chanceDeepStrike());
                            Log.Message(string.Format("Deep Strike Candidate: {0}", p.LabelShortCap));
                            if (Striker)
                            {

                                Log.Message(string.Format("Depoyment: Deep Strike", p.LabelShortCap));
                                DeepStrikers.Add(p);
                            }
                            else
                            {
                                Log.Message(string.Format("Depoyment: Normal", p.LabelShortCap));
                                pawnsN.Add(p);
                            }
                        }
                        if (!DeepStrikers.NullOrEmpty())
                        {
                            foreach (Pawn p in DeepStrikers)
                            {
                                map.DeepStrike().GetDirectlyHeldThings().TryAdd(p, false);
                            }
                            map.DeepStrike().raidLastTick = Find.TickManager.TicksGame;
                            map.DeepStrike().strikeMinDelay = Rand.Range(3000, 6000);
                            map.DeepStrike().strikeMaxDelay = Rand.Range(12000, 24000);
                            /*
                            float points = 0f;
                            foreach (Pawn p in DeepStrikers)
                            {
                                points += p.kindDef.combatPower;
                            }
                            Faction faction = parms.faction;
                            int @int = Rand.Int;
                            IncidentParms raidParms = StorytellerUtility.DefaultParmsNow(IncidentCategoryDefOf.ThreatBig, map);
                            raidParms.forced = true;
                            raidParms.faction = faction;
                            raidParms.raidStrategy = RaidStrategyDefOf.ImmediateAttack;
                            raidParms.raidArrivalMode = PawnsArrivalModeDefOf.EdgeWalkIn;
                        //    raidParms.spawnCenter = null;
                            raidParms.generateFightersOnly = true;
                            raidParms.points = points;
                            raidParms.pawnGroupMakerSeed = new int?(@int);
                            PawnGroupMakerParms defaultPawnGroupMakerParms = IncidentParmsUtility.GetDefaultPawnGroupMakerParms(PawnGroupKindDefOf.Combat, raidParms, false);
                            defaultPawnGroupMakerParms.points = IncidentWorker_Raid.AdjustedRaidPoints(defaultPawnGroupMakerParms.points, raidParms.raidArrivalMode, raidParms.raidStrategy, defaultPawnGroupMakerParms.faction, PawnGroupKindDefOf.Combat);
                            IEnumerable<PawnKindDef> pawnKinds = PawnGroupMakerUtility.GeneratePawnKindsExample(defaultPawnGroupMakerParms);
                            QueuedIncident qi = new QueuedIncident(new FiringIncident(IncidentDefOf.RaidEnemy, null, raidParms), Find.TickManager.TicksGame + Rand.Range(2400,7200), 0);
                            Find.Storyteller.incidentQueue.Add(qi);
                            */
                        }
                    }
                    pawns = pawnsN;
                }
            }
        }
    }


    [HarmonyPatch(typeof(PawnsArrivalModeWorker_EdgeWalkIn), "Arrive")]
    public static class AM_PawnsArrivalModeWorker_EdgeWalkIn_Arrive_Infiltrator_Patch
    {
        [HarmonyPrefix]
        public static void Arrive_Infiltrator(List<Pawn> pawns, IncidentParms parms)
        {
            Map map = (Map)parms.target;
            //    Log.Message(string.Format("pawns: {0}", pawns.Count));
            //    Log.Message(string.Format("Map: {0}", map));
            if (!pawns.NullOrEmpty())
            {
                bool patch = pawns.Any(x => x.kindDef.HasModExtension<InfiltratorExtension>());
                List<Pawn> Infiltrators = new List<Pawn>();
                List<Pawn> pawnsN = new List<Pawn>();
                if (patch)
                {
                    pawnsN = pawns.FindAll(x => !x.kindDef.HasModExtension<InfiltratorExtension>());
                    Infiltrators = pawns.FindAll(x => x.kindDef.HasModExtension<InfiltratorExtension>());
                    if (!pawns.FindAll(x => x.kindDef.HasModExtension<InfiltratorExtension>()).NullOrEmpty())
                    {
                        Log.Message(string.Format("Infiltrators: {0}", Infiltrators.Count));
                    }
                }
            }
        }
    }

}
