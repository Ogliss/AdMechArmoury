using System;
using System.Collections.Generic;
using System.Linq;
using RimWorld;
using UnityEngine;
using Verse;

namespace AdeptusMechanicus
{
    public class CompProperties_WargearWeaponToggle : CompProperties
    {
        public CompProperties_WargearWeaponToggle()
        {
            this.compClass = typeof(CompWargearWeaponToggle);
        }
        public ResearchProjectDef requiredResearch = null;
    }

    // Token: 0x02000002 RID: 2
    public class CompWargearWeaponToggle : CompWargearWeapon
    {
        public CompProperties_WargearWeaponToggle Props => (CompProperties_WargearWeaponToggle)props;
        
        public bool Toggled = false;

        public override void PostExposeData()
        {
            base.PostExposeData();
            Scribe_Values.Look(ref Toggled, "ToggledFireMode", false, true);
        }

        protected virtual VerbProperties PrimaryProjectile
        {
            get
            {
                if (parent != null && parent is ThingWithComps)
                {
                    return parent.def.Verbs[1];
                }
                else
                {
                    return null;
                }
            }
        }
        
        protected virtual VerbProperties SecondaryProjectile
        {
            get
            {
                if (parent != null && parent is ThingWithComps)
                {
                    return parent.def.Verbs[2];
                }
                else
                {
                    return null;
                }
            }
        }

        public override void PostSpawnSetup(bool respawningAfterLoad)
        {
            base.PostSpawnSetup(respawningAfterLoad);
        }
        
        public override IEnumerable<Gizmo> CompGetGizmosExtra()
        {
            return base.CompGetGizmosExtra();
        }

        public override IEnumerable<Gizmo> EquippedGizmos()
        {
            ThingWithComps owner = IsWorn ? GetWearer : parent;
            bool flag = Find.Selector.SingleSelectedThing == GetWearer;
            if (flag && GetWearer.Drafted && GetWearer.IsColonist)
            {
                int num = 700000101;
                yield return new Command_Toggle
                {
                    icon = this.CommandTex,
                    defaultLabel = "OG_ToggleFireModeCommandLabel".Translate(),
                    defaultDesc = "OG_ToggleFireModeCommandDesc".Translate(),
                    isActive = (() => Toggled),
                    toggleAction = delegate ()
                    {
                        Toggled = !Toggled;
                        SwitchFireMode();
                    },
                    activateSound = SoundDef.Named("Click"),
                    groupKey = num,
                    disabled = GetWearer.stances.curStance.StanceBusy,
                    disabledReason = "Busy"
                };
            }
            yield break;
        }

        private Texture2D CommandTex
        {
            get
            {
                if (this.cachedCommandTex == null)
                {
                    this.cachedCommandTex = Toggled ? SecondaryProjectile.defaultProjectile.uiIcon : PrimaryProjectile.defaultProjectile.uiIcon;
                }
                return this.cachedCommandTex;
            }
        }

        private Texture2D cachedCommandTex;

        public override void CompTick()
        {
            base.CompTick();
            if (GetWearer != lastWearer)
            {
                lastWearer = GetWearer;
            }
        }

        // Token: 0x06000006 RID: 6 RVA: 0x000021F0 File Offset: 0x000003F0
        public void ToggleSecondaryFire()
        {
            CompEquippable c = parent.GetComp<CompEquippable>();
            c.VerbTracker.PrimaryVerb.verbProps = SecondaryProjectile;
        }

        // Token: 0x06000007 RID: 7 RVA: 0x0000227D File Offset: 0x0000047D
        public void TogglePrimaryFire()
        {
            CompEquippable c = parent.GetComp<CompEquippable>();
            c.VerbTracker.PrimaryVerb.verbProps = PrimaryProjectile;
        }

        public void SwitchFireMode()
        {
            switch (Toggled)
            {
                case false:
                    TogglePrimaryFire();
                    break;
                case true:
                    ToggleSecondaryFire();
                    break;
            }
        }
    }
}
